USE er_system; 

DROP TABLE IF EXISTS Registrations, Exams, Courses, Buildings, 
Locations, Users, Majors, Departments, Roles;


CREATE TABLE Roles (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);


CREATE TABLE Departments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);


CREATE TABLE Majors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    department_id INT NOT NULL,
    FOREIGN KEY (department_id) REFERENCES Departments(id)
);


-- Table for all users, including faculty and students
-- table includes: id(exam registration id, helps to
-- keep track of every user), full name, 
-- username(CSN email), password(NSHE ID),
-- role(faculty or student), major(for faculty reports), 
-- department(identifies faculty members).
-- id: autogenerated Registration id for every user,
-- helps to create a more structured database. Used in all
-- tables.
-- email format: student@csn.edu or professor@csn.edu
-- =============================================================
CREATE TABLE if NOT exists Users (	
	id int auto_increment PRIMARY KEY,
    name varchar(150) NOT NULL,
    email varchar(150) UNIQUE NOT NULL,   
    phone varchar(20) NOT NULL,
    nshe_id varchar(10) NOT NULL,
    role_id INT NOT NULL,
    department_id INT NOT NULL,
    major_id INT NOT NULL,
    FOREIGN KEY (role_id) REFERENCES Roles(id),
    FOREIGN KEY (department_id) REFERENCES Departments(id),
    FOREIGN KEY (major_id) REFERENCES Majors(id)
);


CREATE TABLE Locations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);


CREATE TABLE Buildings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    location_id INT NOT NULL,
    FOREIGN KEY (location_id) REFERENCES Locations(id)
);


CREATE TABLE Courses (
    id INT AUTO_INCREMENT PRIMARY KEY,
    course_code VARCHAR(20) NOT NULL,
    course_name VARCHAR(150) NOT NULL,
    department_id INT NOT NULL,
    FOREIGN KEY (department_id) REFERENCES Departments(id)
);


-- Exams table. It will store all exam sessions
-- It includes: id, name of the course, code for each course,
-- exam date, location, capacity.
-- =============================================================
CREATE TABLE if NOT exists Exams (	
	id int auto_increment PRIMARY KEY,  
    exam_type VARCHAR(255) NOT NULL,
	course_id INT NOT NULL,
    exam_date DATE NOT NULL,
    location_id INT NOT NULL,
    building_id INT NOT NULL,
    capacity INT NOT NULL DEFAULT 20,
    FOREIGN KEY (course_id) REFERENCES Courses(id),
    FOREIGN KEY (location_id) REFERENCES Locations(id),
    FOREIGN KEY (building_id) REFERENCES Buildings(id)    
    );


-- Registration table. It connects users to exams, and shows
-- the exam records. It supports cancellations/rescheduling.
-- It includes: id, registration id, exam and user id, 
-- registration date. The registration id(format: CSN###) 
-- keeps track of every registration, allowing faculty to find 
-- appointments, as well as the status
-- =============================================================
CREATE TABLE if NOT exists Registrations (	
	id int auto_increment PRIMARY KEY,
    registration_id varchar(10) UNIQUE NOT NULL,
	exam_id int NOT NULL,
    user_id int NOT NULL,
    -- keeps track of the date/time of registration
    registration_date timestamp NOT NULL DEFAULT current_timestamp,
    -- keeps track of appointment cancellations
    status ENUM('Active', 'Canceled') DEFAULT 'Active',
    UNIQUE(exam_id, user_id),
    FOREIGN KEY(exam_id) REFERENCES Exams(id) ON DELETE CASCADE,
    FOREIGN KEY(user_id) REFERENCES Users(id) ON DELETE CASCADE
);


-- SEED DATA
INSERT INTO Locations (name) VALUES
('North Las Vegas'),
('West Charleston'),
('Henderson');

INSERT INTO Buildings (name, location_id) VALUES
('Building B', 1),  -- North Las Vegas
('Building D', 2),  -- West Charleston
('Building A', 3);  -- Henderson

INSERT INTO Departments (name) VALUES
('Computer and Information Technology'),
('Mathematics'),
('Business Administration'),
('Health Sciences'),
('Engineering Technology');

INSERT INTO Majors (name, department_id) VALUES
('Computer Science', 1),
('Information Systems', 1),
('Mathematics', 2),
('Business Management', 3),
('Nursing', 4),
('Electronics Engineering', 5);

INSERT INTO Courses (course_code, course_name, department_id) VALUES
('CS135', 'Introduction to Programming', 1),
('CS202', 'Computer Science 1', 1),
('MATH120', 'Fundamentals of College Mathematics', 2),
('BUS101', 'Principles of Management', 3),
('NURS101', 'Foundations of Nursing Practice', 4),
('ET131', 'Basic Electronics I', 5);

INSERT INTO Roles (name) VALUES
('faculty'),
('student');

INSERT INTO Users (name, email, phone, nshe_id, role_id, department_id, major_id) VALUES
('Bart Simpson','bart.simpson@csn.edu','765-000-0000','2119988011',1,1,1),
('Velma Dinkley','velma.dinkley@student.csn.edu','123-456-7890','2044992200',2,1,2),
('Patrick Star','patrick.star@student.csn.edu','908-765-5454','2009991000',2,3,4);

INSERT INTO Exams (exam_type, course_id, exam_date, location_id, building_id, capacity)
VALUES
('Exam #1', 3, '2025-11-05', 3, 3, 20),     
('Midterm Exam', 1, '2025-10-27', 1, 2, 20), 
('Final Exam', 2, '2025-12-10', 2, 1, 20); 

INSERT INTO Registrations (registration_id, exam_id, user_id)
VALUES
('CSN001',1, 1),
('CSN002',2, 2),
('CSN003',3, 3);

-- TRIGGERS
-- registration_id generator
DELIMITER $$

CREATE TRIGGER id_generator
BEFORE INSERT ON Registrations 
FOR EACH ROW 
BEGIN
    DECLARE next_id INT;

    SELECT AUTO_INCREMENT INTO next_id
    FROM information_schema.tables
    WHERE table_name = 'Registrations'
      AND table_schema = DATABASE();

    IF NEW.registration_id IS NULL OR NEW.registration_id = '' THEN
        SET NEW.registration_id = CONCAT('CSN', LPAD(next_id, 3, '0'));
    END IF;
END$$

DELIMITER ;


DELIMITER $$

CREATE TRIGGER check_email_format
BEFORE INSERT ON Users
FOR EACH ROW
BEGIN
    DECLARE role_name VARCHAR(50);

    SELECT name INTO role_name FROM Roles WHERE id = NEW.role_id;

    -- If the role is 'student', enforce @student.csn.edu
    IF role_name = 'student' AND NEW.email NOT LIKE '%@student.csn.edu' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid email: Students must use @student.csn.edu';
    END IF;

    -- If the role is 'faculty', enforce @csn.edu
    IF role_name = 'faculty' AND NEW.email NOT LIKE '%@csn.edu' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid email: Faculty must use @csn.edu';
    END IF;
END$$

DELIMITER ;



SELECT * FROM Users;
SELECT * FROM Exams;
SELECT * FROM Registrations;
SELECT * FROM Locations;
SELECT * FROM Buildings;
SELECT * FROM Departments;


ALTER TABLE Users
MODIFY nshe_id VARCHAR(10) NULL;

ALTER TABLE Users
ADD COLUMN employee_id VARCHAR(15) NULL AFTER nshe_id;


-- NOTE: adjust table/column names if yours differ
ALTER TABLE `Users`
  ADD UNIQUE KEY `uq_users_email` (`email`),
  ADD UNIQUE KEY `uq_users_nshe` (`nshe_id`);
